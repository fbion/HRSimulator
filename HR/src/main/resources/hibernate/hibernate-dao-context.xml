<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd        http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd     http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd        http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-4.0.xsd        http://www.springframework.org/schema/jee      http://www.springframework.org/schema/jee/spring-jee-4.0.xsd         http://www.springframework.org/schema/lang     http://www.springframework.org/schema/lang/spring-lang-4.0.xsd     http://www.springframework.org/schema/security      http://www.springframework.org/schema/security/spring-security-4.0.xsd">




	<!-- ******************************************************************** -->
	<!-- Scan for dao layer annotated beans -->
	<!-- ******************************************************************** -->
	<context:component-scan base-package="com.idsmanager.main.dao"
		scoped-proxy="interfaces" />

	<!-- ******************************************************************** -->
	<!-- Mark bean transactions as annotation driven -->
	<!-- ******************************************************************** -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- ******************************************************************** -->
	<!-- PropertyConfigurer for the DAO -->
	<!-- ******************************************************************** -->
	<context:property-placeholder location="classpath:hibernate/hibernate-dao.properties" />
	 

	<!-- ******************************************************************** -->
	<!-- Setup the transaction manager -->
	<!-- ******************************************************************** -->
	<!-- Using Atomikos Transaction Manager -->
	<bean class="com.atomikos.icatch.jta.UserTransactionManager"
		destroy-method="close" id="atomikosTransactionManager" init-method="init">
		<property name="forceShutdown" value="true" />
		<property name="startupTransactionService" value="true" />
		<property name="transactionTimeout" value="60" />
	</bean>

	<bean class="com.atomikos.icatch.jta.UserTransactionImp" id="atomikosUserTransaction" />

	<!-- Configure the Spring framework to use JTA transactions from Atomikos -->
	<bean class="org.springframework.transaction.jta.JtaTransactionManager"
		id="transactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
		<property name="transactionSynchronizationName" value="SYNCHRONIZATION_ON_ACTUAL_TRANSACTION" />
	</bean>


	<!-- ******************************************************************** -->
	<!-- Setup a data source -->
	<!-- ******************************************************************** -->




	<!-- Using Apache DBCP Data Sources -->
	<bean class="org.apache.commons.dbcp2.BasicDataSource" id="policyDatasource"
		destroy-method="close" name="policyDatasource,springSecurityDataSource">
		<property name="driverClassName" value="${herringsso.connection.driver_class}" />
		<property name="username" value="${herringsso.connection.username}" />
		<property name="password" value="${herringsso.connection.password}" />
		<property name="url" value="${herringsso.connection.url}" />
		<property name="maxIdle" value="${herringsso.minPoolSize}" />
		<!-- <property name="maxActive" value="${herringsso.maxPoolSize}" /> -->
	</bean>



	<!-- ******************************************************************** -->
	<!-- Setup each persistence unit -->
	<!-- ******************************************************************** -->



	<!-- Configure a JPA vendor adapter -->
	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
		id="policyJPAVendorAdapter">
		<property name="showSql" value="${herringsso.show_sql}" />
		<property name="generateDdl" value="${herringsso.generateDdl}" />
		<property name="databasePlatform" value="${herringsso.dialect}" />
	</bean>
	<!-- EntityManager Factory that brings together the persistence unit, datasource, 
		and JPA Vendor -->
	<bean
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		id="policysso">
		<property name="dataSource" ref="policyDatasource" />
		<property name="persistenceUnitName" value="policysso" />
		<property name="jpaVendorAdapter" ref="policyJPAVendorAdapter" />
		<!-- <property name="jpaPropertyMap"> <map> <entry key="hibernate.transaction.manager_lookup_class" 
			value="com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup" /> <entry 
			key="hibernate.connection.release_mode" value="on_close" /> </map> </property> -->
	</bean>



</beans>
